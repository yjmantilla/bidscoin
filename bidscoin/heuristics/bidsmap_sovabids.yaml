# --------------------------------------------------------------------------------
# This is a bidsmap YAML file with the key-value mappings for the different BIDS
# datatypes (anat, func, dwi, etc). The datatype attributes are the keys that map
# onto the BIDS labels. The bidsmap data-structure should be 5 levels deep:
#
# dict       : dict     : list     : dict        : dict
# dataformat : datatype : run-item : bidsmapping : mapping-data
#
# NB:
# 1) Edit the bidsmap file to your needs before feeding it to bidscoiner.py
# 2) (Institute) users may create their own bidsmap_[template].yaml or
#    bidsmap_[sample].yaml file
#
# For more information, see: https://bidscoin.readthedocs.io
# --------------------------------------------------------------------------------


Options:
# --------------------------------------------------------------------------------
# General options and plugins
# --------------------------------------------------------------------------------
  bidscoin:
    version: 3.7.0-dev            # BIDScoin version (should correspond with the version in ../bidscoin/version.txt)
    bidsignore: extra_data/       # Semicolon-separated list of entries that are added to the .bidsignore file (for more info, see BIDS specifications), e.g. extra_data/;pet/;myfile.txt;yourfile.csv
    subprefix: sub-               # The subject prefix of the source data
    sesprefix: ses-               # The session prefix of the source data
  plugins:                        # List of plugins with plugin-specific key-value pairs (that can be used by the plugin)
    dcm2bidsmap:                  # The default plugin that is used by the bidsmapper to map DICOM and PAR/REC source data
    dcm2niix2bids:                # See dcm2niix -h and https://www.nitrc.org/plugins/mwiki/index.php/dcm2nii:MainPage#General_Usage for more info
      path: module add dcm2niix;  # Command to set the path to dcm2niix (note the semi-colon), e.g. module add dcm2niix/1.0.20180622; or PATH=/opt/dcm2niix/bin:$PATH; or /opt/dcm2niix/bin/ or '"C:\Program Files\dcm2niix\"' (note the quotes to deal with the whitespace)
      args: -b y -z y -i n        # Argument string that is passed to dcm2niix. Tip: SPM users may want to use '-z n' (which produces unzipped nifti's, see dcm2niix -h for more information)
    phys2bidscoin:                # The settings for the phys2bidscoin plugin
    sova2coin:            #module add sovabids #
      rules_file : Y:\code\bidscoin\bidscoin\heuristics\sovabids_rules.yaml
      non-bids:
        path_pattern : /%ignore%/ses-%entities.session%/%entities.task%/sub-%entities.subject%.vhdr #USE POSIX
Physio:
# --------------------------------------------------------------------------------
# Physio key-value heuristics (phys2bids -info data) that are mapped to the BIDS labels)
# --------------------------------------------------------------------------------
  subject: <<SourceFilePath>>     # <<SourceFilePath>> extracts the subject label from the source directory during bidscoiner runtime
  session: <<SourceFilePath>>     # <<SourceFilePath>> extracts the session label from the source directory during bidscoiner runtime

  beh:        # ----------------------- All behavioural runs --------------------
  - provenance:                   # The fullpath name of the source file from which the attributes are read. Serves also as a look-up key to find a run in the bidsmap
    filesystem:                   # This is what phys2bids is using now (well, part of it)
      path:                       # File folder, e.g. ".*Parkinson.*" or ".*(phantom|bottle).*"
      name:                       # File name, e.g. ".*fmap.*" or ".*(fmap|field.?map|B0.?map).*"
      size:                       # File size, e.g. "2[4-6]\d MB" for matching files between 240-269 MB
      nrfiles:                    # Number of files in the folder that match the above criteria, e.g. "5/d/d" for matching a number between 500-599
    attributes:                   # The matching (regexp) criteria for the phys2bids -info data go in here
      Trigger:
      CO2:
      O2:
      Pulse:
    bids:
      task:
      acq:
      recording:
      run: <<1>>                  # This will be updated during bidscoiner runtime (as it depends on the already existing files)
      suffix: physio
    meta:                         # This is an optional entry for meta-data dictionary that will be appended to the json sidecar files produced by dcm2niix
      SamplingFrequency:
      StartTime:
      Trigger: <<Trigger>>
      Columns:
  - provenance:                   # The fullpath name of the source file from which the attributes are read. Serves also as a look-up key to find a run in the bidsmap
    filesystem:                   # This is what phys2bids is using now (well, part of it)
      path:                       # File folder, e.g. ".*Parkinson.*" or ".*(phantom|bottle).*"
      name:                       # File name, e.g. ".*eye.*" or ".*(iEEG|MEG).*"
      size:                       # File size, e.g. "2[4-6]\d MB" for matching files between 240-269 MB
      nrfiles:                    # Number of files in the folder that match the above criteria, e.g. "5/d/d" for matching a number between 500-599
    attributes:                   # The matching (regexp) criteria for the phys2bids -info data go in here
      Trigger:
      CO2:
      O2:
      Pulse:
    bids:
      task:
      acq:
      recording:
      run: <<1>>                  # This will be updated during bidscoiner runtime (as it depends on the already existing files)
      suffix: stim
    meta:                         # This is an optional entry for meta-data dictionary that will be appended to the json sidecar files produced by phys2bids
      SamplingFrequency:
      StartTime:
      Trigger: <<Trigger>>
      Columns:


EEG:
# --------------------------------------------------------------------------------
# Physio key-value heuristics (phys2bids -info data) that are mapped to the BIDS labels)
# --------------------------------------------------------------------------------
  subject: <<entities.subject>> #<<PathPattern>>     # <<SourceFilePath>> extracts the subject label from the source directory during bidscoiner runtime
  session: <<entities.session>> #ses-%session%\%task%\sub-%subject%.vhdr     # <<SourceFilePath>> extracts the session label from the source directory during bidscoiner runtime

  eeg:        # ----------------------- All behavioural runs --------------------
  - provenance:                   # The fullpath name of the source file from which the attributes are read. Serves also as a look-up key to find a run in the bidsmap
    filesystem:                   # This is what phys2bids is using now (well, part of it)
      path:                       # File folder, e.g. ".*Parkinson.*" or ".*(phantom|bottle).*"
      name:         "(.*)"        # File name, e.g. ".*fmap.*" or ".*(fmap|field.?map|B0.?map).*"
      size:                       # File size, e.g. "2[4-6]\d MB" for matching files between 240-269 MB
      nrfiles:                    # Number of files in the folder that match the above criteria, e.g. "5/d/d" for matching a number between 500-599
    attributes:                   # The matching (regexp) criteria for the phys2bids -info data go in here
      sidecar.SamplingFrequency:
      sidecar.PowerLineFrequency:
      sidecar.RecordingDuration:
      entities.subject:
      entities.task:
      entities.session:
    bids:
      task: <entities.task> #why is it that i need single for it to work
      acq: 
      recording:
      run: <<1>>                  # This will be updated during bidscoiner runtime (as it depends on the already existing files)
      suffix: eeg
    meta:                         # This is an optional entry for meta-data dictionary that will be appended to the json sidecar files produced by dcm2niix
      SamplingFrequency: <sidecar.SamplingFrequency>
      PowerLineFrequency: <sidecar.PowerLineFrequency>
      RecordingDuration: <sidecar.RecordingDuration>